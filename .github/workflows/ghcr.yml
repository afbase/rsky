name: Build and Publish Docker Images to GHCR

on:
  push:
    branches: [ main ]
    paths:
      - 'rsky-pds/**'
      - 'rsky-jetstream-subscriber/**'
      - 'rsky-firehose/**'
      - '.github/workflows/ghcr.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  ORGANIZATION: blacksky-algorithms

jobs:
  # Wait for Rust CI workflow to complete
  wait-for-rust-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Rust CI
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'ci-success'  # This is the final job in the rust.yml workflow
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  build-and-push:
    needs: wait-for-rust-ci
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: rsky-pds
            dockerfile: rsky-pds/Dockerfile
          # - name: rsky-jetstream-subscriber
          #   dockerfile: rsky-jetstream-subscriber/Dockerfile
          # - name: rsky-firehose
          #   dockerfile: rsky-firehose/Dockerfile

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for ${{ matrix.service.name }} Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ matrix.service.name }}
          tags: |
            type=sha,format=long
            type=raw,value=main,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.service.name }} Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max